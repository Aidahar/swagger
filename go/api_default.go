/*
 * Candy Server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

// #cgo CFLAGS: -g -Wall
// #include "asc_cow.h"
import "C"
import (
	"encoding/json"
	"io"
	"log"
	"net/http"
	"unsafe"
)

type CandyShop struct {
	Candyes []BuyCandyBody
}

var Shop = LoadCandy()

func BuyCandy(w http.ResponseWriter, r *http.Request) {
	b, err := io.ReadAll(r.Body)
	if err != nil {
		log.Fatal(err)
	}
	var candy BuyCandyBody
	json.Unmarshal(b, &candy)
	change, answer := count(Shop, candy)
	if answer == "" {
		var a InlineResponse201
		name := C.CString("Thank, you!")
		answer := C.GoString(C.ask_cow(name))
		defer C.free(unsafe.Pointer(name))
		a.Change = change
		a.Thanks = answer
		newData, err := json.Marshal(a)
		if err != nil {
			log.Fatal(err)
		}
		w.Write(newData)
	} else {
		var e InlineResponse400
		e.Error_ = answer
		newData, err := json.Marshal(e)
		if err != nil {
			log.Fatal(err)
		}
		w.Write(newData)
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func count(shop CandyShop, body BuyCandyBody) (int32, string) {
	var change int32
	var err string
	var check bool
	log.Println(shop.Candyes[0].CandyCount)
	for _, value := range shop.Candyes {
		if value.CandyType == body.CandyType {
			check = true
			if body.Money >= value.Money {
				change = body.Money - value.Money*body.CandyCount
				if change < 0 {
					err = "not enoth money"
				}
				value.CandyCount -= body.CandyCount
				if value.CandyCount < 0 {
					err = "not enoth candy"
				}
				log.Println(value.CandyCount)
			} else {
				err = "not enoth money"
			}
		}
	}
	if !check {
		err = "incorrect candy"
	}
	return change, err
}

func LoadCandy() CandyShop {
	var Shop CandyShop
	var AA BuyCandyBody
	AA.CandyType = "AA"
	AA.Money = 15
	AA.CandyCount = 10
	var CE BuyCandyBody
	CE.CandyType = "CE"
	CE.Money = 10
	CE.CandyCount = 10
	var NT BuyCandyBody
	NT.CandyType = "NT"
	NT.Money = 17
	NT.CandyCount = 10
	var DE BuyCandyBody
	DE.CandyType = "DE"
	DE.Money = 21
	DE.CandyCount = 10
	var YR BuyCandyBody
	YR.CandyType = "YR"
	YR.Money = 23
	YR.CandyCount = 10
	Shop.Candyes = append(Shop.Candyes, AA, CE, NT, DE, YR)
	return Shop
}
